// FILE: nexusai-cloud/apps/api/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  USER
  ADMIN
}

enum ReportStatus {
  PENDING
  RESOLVED
  IGNORED
}

enum AccountType {
  NEW
  MATURE
}

// MODELS
model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  nickname           String
  password           String
  subscriptionStatus String            @default("NONE")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  role               UserRole          @default(USER)

  // --- AI Configuration Fields ---
  aiProvider         String            @default("ollama")
  ollamaModel        String?
  qwenApiKey         String?           @db.Text   // 阿里云的API Key
  qwenModelName      String?           // 例如 "qwen-plus", "qwen-turbo"
  
  // --- Relationships ---
  exceptionReports   ExceptionReport[]
  facebookAccounts   FacebookAccount[]
  personas           Persona[]
}

model FacebookAccount {
  id                  String       @id @default(cuid())
  nickname            String
  encryptedCredential String       @db.Text
  accountType         AccountType  @default(NEW)
  startTime           String
  endTime             String
  
  // Relation to the User who owns this account
  ownerId             String
  owner               User         @relation(fields: [ownerId], references: [id])
  
  // Relation to the Persona that manages this account
  assignedPersonaId   String?      @unique
  assignedPersona     Persona?     @relation("PersonaManagesAccounts", fields: [assignedPersonaId], references: [id])
}

model Persona {
  id          String    @id @default(cuid())
  name        String
  mission     String    @db.Text
  personality String    @db.Text

  // Relation to the User who owns this persona
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])

  // Relation to the Facebook accounts this persona manages
  assignedAccounts FacebookAccount[] @relation("PersonaManagesAccounts")
  
  // Relation to a KnowledgeBase (optional, assuming model will be added later)
  // knowledgeBaseId String?
}

model SelectorKnowledge {
  id          String   @id @default(cuid())
  pageType    String
  elementName String
  selector    String   @db.Text
  priority    Int      @default(10)
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([pageType, elementName])
}

// @description 存储由本地Agent上报的、无法自动恢复的异常事件。
model ExceptionReport {
  id               String       @id @default(cuid())
  timestamp        DateTime     @default(now())
  status           ReportStatus @default(PENDING)
  
  // --- 任务上下文 ---
  accountId        String
  personaId        String
  task             Json
  failedAction     String
  failedSelector   String?      @db.Text // <-- Corrected: One dot
  errorMessage     String       @db.Text // <-- Corrected: One dot
  
  // --- 现场快照 ---
  pageUrl          String       @db.Text // <-- Corrected: One dot
  htmlSnapshot     String       @db.Text // <-- Corrected: One dot
  screenshotBase64 String       @db.Text // <-- Corrected: One dot
  
  // --- 关系 ---
  ownerId          String
  owner            User         @relation(fields: [ownerId], references: [id])
}